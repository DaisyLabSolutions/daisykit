# Workflow to build and test wheels
name: Wheel builder

on:
  schedule:
    # Nightly build at 3:42 A.M.
    - cron: "42 3 */1 * *"
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Manual run
  workflow_dispatch:

jobs:
  # Check whether to build the wheels and the source tarball
  check_build_trigger:
    name: Check build trigger
    runs-on: ubuntu-latest
    if: github.repository == 'Daisykit-AI/daisykit'
    outputs:
      build: ${{ steps.check_build_trigger.outputs.build }}

    steps:
      - name: Checkout daisykit
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: check_build_trigger
        name: Check build trigger
        run: bash build_tools/github/check_build_trigger.sh

  # Build the wheels
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # os: [windows-latest, ubuntu-latest, macos-latest] # TODO: install OpenCV C++ and reactivate build for Windows and macOS 
        os: [ubuntu-latest]
        python: [37]
        bitness: [64]
        # manylinux_image: [manylinux1, manylinux2010]
        manylinux_image: [manylinux2014]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          # - os: windows-latest
          #   bitness: 64
          #   platform_id: win_amd64
          # - os: windows-latest
          #   bitness: 32
          #   platform_id: win32
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          # - os: ubuntu-latest
          #   bitness: 32
          #   platform_id: manylinux_i686
          # - os: macos-latest
          #   bitness: 64
          #   platform_id: macosx_x86_64
        exclude:
          - os: macos-latest
            bitness: 32
          # Remove manylinux1 from the windows and osx build matrix since
          # manylinux_image is not used for these platforms
          # - os: windows-latest
          #   manylinux_image: manylinux1
          # - os: macos-latest
          #   manylinux_image: manylinux1

    steps:
      - name: Checkout daisykit
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # update once build dependencies are available

      - name: Build and test wheels
        env:
          CONFTEST_PATH: ${{ github.workspace }}/conftest.py
          CONFTEST_NAME: conftest.py
          CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
                            OPENBLAS_NUM_THREADS=2
                            MACOSX_DEPLOYMENT_TARGET=10.13
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          # Install OpenCV for linux
          # CIBW_BEFORE_ALL_LINUX: yum install -y opencv opencv-devel
          CIBW_BEFORE_ALL_LINUX: bash build_tools/github/install_cv4.sh
          # Install OpenCV for Windows and macOS before activating build
          # CIBW_BEFORE_ALL_WINDOWS: 
          # CIBW_BEFORE_ALL_MACOS:
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
          CIBW_BEFORE_TEST_WINDOWS: bash build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_TEST_REQUIRES: pytest pandas threadpoolctl
          CIBW_TEST_COMMAND: bash {project}/build_tools/github/test_wheels.sh
          CIBW_TEST_COMMAND_WINDOWS: bash {project}/build_tools/github/test_windows_wheels.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_BUILD_VERBOSITY: 1

        run: bash build_tools/github/build_wheels.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

      - name: Upload wheels for daisykit
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.DAISYKIT_PYPI_USERNAME }} -p ${{ secrets.DAISYKIT_PYPI_PASSWORD }} --skip-existing wheelhouse/daisykit-*

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build

    steps:
      - name: Checkout daisykit
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # update once build dependencies are available

      - name: Build source distribution
        run: bash build_tools/github/build_source.sh

      - name: Test source distribution
        run: bash build_tools/github/test_source.sh
        env:
          OMP_NUM_THREADS: 2
          OPENBLAS_NUM_THREADS: 2

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

      - name: Upload dist for daisykit
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.DAISYKIT_PYPI_USERNAME }} -p ${{ secrets.DAISYKIT_PYPI_PASSWORD }} --skip-existing dist/*.tar.gz
